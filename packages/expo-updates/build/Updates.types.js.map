{"version":3,"file":"Updates.types.js","sourceRoot":"","sources":["../src/Updates.types.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAN,IAAY,eAeX;AAfD,WAAY,eAAe;IACzB;;;;OAIG;IACH,uDAAoC,CAAA;IACpC;;OAEG;IACH,4DAAyC,CAAA;IACzC;;OAEG;IACH,kCAAe,CAAA;AACjB,CAAC,EAfW,eAAe,KAAf,eAAe,QAe1B;AAoGD;;GAEG;AACH,MAAM,CAAN,IAAY,mBASX;AATD,WAAY,mBAAmB;IAC7B,oCAAa,CAAA;IACb,kEAA2C,CAAA;IAC3C,+EAAwD,CAAA;IACxD,4EAAqD,CAAA;IACrD,iFAA0D,CAAA;IAC1D,mEAA4C,CAAA;IAC5C,mEAA4C,CAAA;IAC5C,0DAAmC,CAAA;AACrC,CAAC,EATW,mBAAmB,KAAnB,mBAAmB,QAS9B;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,oBAOX;AAPD,WAAY,oBAAoB;IAC9B,uCAAe,CAAA;IACf,uCAAe,CAAA;IACf,qCAAa,CAAA;IACb,qCAAa,CAAA;IACb,uCAAe,CAAA;IACf,uCAAe,CAAA;AACjB,CAAC,EAPW,oBAAoB,KAApB,oBAAoB,QAO/B","sourcesContent":["import Constants from 'expo-constants';\n\n/**\n * The types of update-related events.\n */\nexport enum UpdateEventType {\n  /**\n   * A new update has finished downloading to local storage. If you would like to start using this\n   * update at any point before the user closes and restarts the app on their own, you can call\n   * [`Updates.reloadAsync()`](#reloadasync) to launch this new update.\n   */\n  UPDATE_AVAILABLE = 'updateAvailable',\n  /**\n   * No updates are available, and the most up-to-date update is already running.\n   */\n  NO_UPDATE_AVAILABLE = 'noUpdateAvailable',\n  /**\n   * An error occurred trying to fetch the latest update.\n   */\n  ERROR = 'error',\n}\n\n// @docsMissing\n// TODO(eric): move source of truth for manifest type to this module\n/**\n * @hidden\n */\nexport type ClassicManifest = typeof Constants.manifest;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type Manifest = ClassicManifest | typeof Constants.manifest2;\n// modern manifest type is intentionally not exported, since the plan is to call it just \"Manifest\"\n// in the future\n\n/**\n * The result of checking for a new update.\n */\nexport type UpdateCheckResult = {\n  /**\n   * `true` if an update is available, `false` if the app is already running the latest available\n   * update.\n   */\n  isAvailable: boolean;\n  /**\n   * If `isAvailable` is `true`, the manifest of the available update, and `undefined` otherwise.\n   */\n  manifest?: Manifest;\n};\n\n/**\n * The result of fetching a new update.\n */\nexport type UpdateFetchResult = {\n  /**\n   * `true` if the fetched bundle is new (that is, a different version than what's currently\n   * running), `false` otherwise.\n   */\n  isNew: boolean;\n  /**\n   * If `isNew` is `true`, the manifest of the newly downloaded update, and `undefined` otherwise.\n   */\n  manifest?: Manifest;\n};\n\n/**\n * An object that is passed into each event listener when an auto-update check occurs.\n */\nexport type UpdateEvent = {\n  /**\n   * Type of the event.\n   */\n  type: UpdateEventType;\n  /**\n   * If `type` is `Updates.UpdateEventType.UPDATE_AVAILABLE`, the manifest of the newly downloaded\n   * update, and `undefined` otherwise.\n   */\n  manifest?: Manifest;\n  /**\n   * If `type` is `Updates.UpdateEventType.ERROR`, the error message, and `undefined` otherwise.\n   */\n  message?: string;\n};\n\n/**\n * An object representing a single log entry from expo-updates logging on the client.\n */\nexport type UpdatesLogEntry = {\n  /**\n   * The time the log was written, in milliseconds since Jan 1 1970 UTC.\n   */\n  timestamp: number;\n  /**\n   * The log entry message.\n   */\n  message: string;\n  /**\n   * One of the defined code values for expo-updates log entries.\n   */\n  code: UpdatesLogEntryCode;\n  /**\n   * One of the defined log level or severity values.\n   */\n  level: UpdatesLogEntryLevel;\n  /**\n   * If present, the unique ID of an update associated with this log entry.\n   */\n  updateId?: string;\n  /**\n   * If present, the unique ID or hash of an asset associated with this log entry.\n   */\n  assetId?: string;\n  /**\n   * If present, an iOS or Android native stack trace associated with this log entry.\n   */\n  stacktrace?: string[];\n};\n\n/**\n * The possible code values for expo-updates log entries\n */\nexport enum UpdatesLogEntryCode {\n  NONE = 'None',\n  NO_UPDATES_AVAILABLE = 'NoUpdatesAvailable',\n  UPDATE_ASSETS_NOT_AVAILABLE = 'UpdateAssetsNotAvailable',\n  UPDATE_SERVER_UNREACHABLE = 'UpdateServerUnreachable',\n  UPDATE_HAS_INVALID_SIGNATURE = 'UpdateHasInvalidSignature',\n  UPDATE_FAILED_TO_LOAD = 'UpdateFailedToLoad',\n  ASSETS_FAILED_TO_LOAD = 'AssetsFailedToLoad',\n  JS_RUNTIME_ERROR = 'JSRuntimeError',\n}\n\n/**\n * The possible log levels for expo-updates log entries\n */\nexport enum UpdatesLogEntryLevel {\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type LocalAssets = Record<string, string>;\n"]}